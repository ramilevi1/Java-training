package labs;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

public class Lab3B {

	public static void main(String[] args) {
		String filename = "C:\\SDET University\\Files\\passwordlist.txt";
		String [] passwords = new String [7];
		File file = new File (filename);
		try {
			BufferedReader br = new BufferedReader(new FileReader(file));
			for (int i=0; i<passwords.length; i++) {
				passwords[i]= br.readLine();
			}
		} catch (FileNotFoundException e) {System.out.println("Error: could not Open file ");
		} catch (IOException e) { System.out.println("Error: could not read file ");}
	
		for (String password: passwords) {
			System.out.println(password);
			boolean hasNumber = false;
			boolean hasLetter = false;
			boolean hasSpecial = false;
			boolean hasInvalidChar = true;
			
			for (int n=0; n<password.length(); n++) {
				//1. contain number
				if ("0123456789".contains(password.substring(n,n+1))) {
		//			System.out.println("position "+n + "contain a number");
					hasNumber = true;
				}
				else if ("abcdefghijklmnopqrstuvwxyz".contains(password.toLowerCase().substring(n, n+1) )) {
		//			System.out.println("position "+n + "contain a letter");
					hasLetter = true;
				}
				else if ("!@#$%^&*?~-".contains(password.substring(n, n+1))) {
		//			System.out.println("position "+n + "contain a special character");
					hasSpecial = true;
				}
				else {
					try { throw new InvalidCharacterException(password.substring(n, n+1));
					} catch (InvalidCharacterException e) {e.toString(); 
				}
			}
				
			try {
				if (!hasNumber) {throw new NumberCriteriaException(password);}
				else if (!hasLetter) {throw new LetterCriteriaException(password);}
				else if (!hasSpecial) {throw new SpecialCharCriteriaException(password);}
				} catch (NumberCriteriaException | LetterCriteriaException | SpecialCharCriteriaException e) {
					System.out.print("invalid password");
					System.out.print(e.toString());
				}
			}			
		}
	}

class InvalidCharacterException extends Exception {
	String ch;
	public InvalidCharacterException(String ch) {
		this.ch = ch;
	}
	public String toString() {
		return "InvalidCharacterException: "+ch;
	
	}
}

class NumberCriteriaException extends Exception {
	String password;
	public NumberCriteriaException(String password) {
		this.password = password;
	}
	public String toString() {
		return "NumberCriteriaException: "+password;
	
	}
}

class LetterCriteriaException extends Exception {
	String password;
	public LetterCriteriaException(String password) {
		this.password = password;
	}
	public String toString() {
		return "LetterCriteriaException: "+password;
	
	}
}

class SpecialCharCriteriaException extends Exception {
	String password;
	public SpecialCharCriteriaException(String password) {
		this.password = password;
	}
	public String toString() {
		return "SpecialCharCriteriaException: "+password;
	
	}
}


